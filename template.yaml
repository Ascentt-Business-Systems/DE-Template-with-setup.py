apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: DE-TEMPLATE-WITH-SETUP.PY
  title: Data Engineering Template with setup.py
  description: Template to create repo for Data Engineering with setup.py
spec:
  owner: user:kandarp.sharma
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
  - title: Provide Configurations
    required:
      - pod_name
      - author
      - email
      - description
      - team_name
    properties:
      pod_name:
        title: Pod Name
        type: string
        description: TDSP Pod Name
        ui:autofocus: true
        ui:options:
          rows: 5
      email:
        title: Email
        type: string
        description: Email address of the author
        ui:autofocus: true
        ui:options:
          rows: 5
      description:
        title: Description
        type: string
        description: A description for the component
        ui:autofocus: true
        ui:options:
          rows: 5
      team_name:
        title: Team Name
        type: string
        description: Provide Team Name, Team Name should be a single word with no spaces.
        ui:autofocus: true
        pattern: "^[^\\s]+$"
        errorMessage: "Team Name should be a single word with no spaces."
        ui:options:
          rows: 5
      author:
        title: Author
        type: string
        description: Owner of the component
        ui:field: OwnerPicker
        ui:options:
          allowedKinds:
            - Group
  - title: Choose a location
    required:
      - repoUrl
    properties:
      repoUrl:
        title: Repository Location
        type: string
        ui:field: RepoUrlPicker
        ui:options:
          allowedHosts:
            - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton  # Make sure the skeleton directory exists
        copyWithoutRender:
          - .github/workflows/*
        values:
          team_name: ${{ parameters.team_name }}
          pod_name: ${{ parameters.pod_name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          author: ${{ parameters.author }}
          email: ${{ parameters.email }} 
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.team_name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}